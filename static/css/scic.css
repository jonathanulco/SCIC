body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  /* font stack from Medium */ }

@media (min-width: 76.7em) {
  @font-face {
    font-family: 'Lato';
    src: url("/font/Lato-Regular.woff2") format("woff2"); }
  @font-face {
    font-family: 'Lato Black';
    src: url("/font/Lato-Black.woff2") format("woff2"); }
  @font-face {
    font-family: 'Lato Bold';
    src: url("/font/Lato-Bold.woff2") format("woff2"); }
  @font-face {
    font-family: 'Lato Light';
    src: url("/font/Lato-Light.woff2") format("woff2"); }
  body {
    font-family: 'Lato'; }
  h1 {
    font-family: 'Lato Black'; }
  h2 {
    font-family: 'Lato Bold'; } }

html {
  /* set base font-size to equiv "10px", which is adapted to rem unit */
  font-size: 62.5%;
  /* IE9-IE11 math fixing. See http://bit.ly/1g4X0bX */
  font-size: calc(1em * 0.625); }

body {
  position: relative;
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  color: #313131;
  background: #aed2dd; }

.invisible {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  border: 0; }

.hidden {
  display: none; }

.button {
  display: inline-block;
  padding: 1rem 2rem;
  font-size: 2.7rem;
  letter-spacing: 2px;
  text-transform: uppercase;
  color: #272f80;
  border: 5px solid #272f80; }
  .button.button--cta {
    font-size: 2.9rem;
    text-transform: none;
    color: #fefefe;
    border: none;
    background: #f87339; }

footer {
  margin-top: auto;
  padding: 3rem 2rem;
  font-size: 1.4rem;
  color: #313131;
  background: #fefefe; }
  footer .footer-int {
    display: flex;
    flex-direction: row;
    justify-content: space-around;
    margin: 0 auto;
    max-width: 99.1em; }
  footer a {
    color: #6a6a6a; }
  footer ul {
    margin: 0 0 2rem;
    padding: 0; }
  footer li {
    list-style: none; }

.banner {
  color: #aed2dd;
  background: #272f80; }
  .banner .header-int {
    display: flex;
    align-items: center;
    flex-direction: row;
    flex-wrap: wrap;
    margin: 0 auto;
    max-width: 119.9em;
    min-height: 7rem; }
  .banner .logo {
    font-size: 2.5rem; }
  .banner .baseline {
    margin: 0 0.5rem 0 2rem;
    line-height: 1.1;
    font-size: 1.3rem; }
    .banner .baseline span {
      display: block; }
  .banner nav {
    margin-left: auto;
    font-size: 1.4rem; }
  .banner ul {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin: 0 1rem;
    padding: 0; }
  .banner li {
    margin: 0 0.8rem;
    list-style: none; }
  .banner nav a {
    position: relative;
    display: block;
    overflow: hidden;
    font-weight: 900;
    text-transform: uppercase;
    color: #fefefe; }
    .banner nav a:hover, .banner nav a:focus {
      text-decoration: none;
      color: #fefefe; }
    .banner nav a:hover:before, .banner nav a:focus:before, .banner nav a.active:before {
      position: absolute;
      z-index: 1;
      content: '';
      top: 60%;
      left: 50%;
      width: 110%;
      height: 5px;
      -webkit-transform: translateX(-50%);
              transform: translateX(-50%);
      background: #f87339; }
    .banner nav a span {
      position: relative;
      z-index: 2; }

main {
  position: relative;
  background: #aed2dd; }
  main .main-int {
    margin: 0 auto;
    padding: 0 5vw;
    max-width: 99.1em; }

.home main {
  margin: 10vh 0;
  padding-bottom: 30vh;
  background-color: #aed2dd;
  background: url(../images/coureurs.svg), url(../images/interrogation.svg);
  background-repeat: no-repeat;
  background-position: 0 100%,50% 50%;
  background-size: 30%, contain; }
  .home main header {
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 50vh;
    text-align: center; }
    .home main header h1 {
      line-height: 1.1;
      font-size: 5.7rem;
      color: #272f80; }
      .home main header h1 span {
        display: block; }
      .home main header h1 a {
        font-size: 2.9rem; }
    .home main header + p {
      margin: 0 auto 3rem;
      font-size: 2rem;
      text-align: center;
      color: #272f80;
      max-width: 70%; }
      .home main header + p + p {
        margin-bottom: 3rem;
        text-align: center; }

.diagnostic-results {
  background: #aed2dd; }
  .diagnostic-results h2 {
    line-height: 1.1;
    font-size: 4.8rem;
    color: #272f80; }
  .diagnostic-results ul, .diagnostic-results p {
    margin-bottom: 3rem;
    font-size: 2rem;
    text-align: center;
    color: #272f80; }

.title {
  margin-top: 20vh;
  line-height: 1.1;
  font-size: 5.7rem;
  text-align: center;
  color: #272f80; }

form .error {
  padding: 1rem 2rem;
  font-size: 1.4rem;
  color: red;
  border: 2px solid red;
  background: #fefefe; }

form [class*='step'] {
  display: flex;
  flex-direction: column;
  justify-content: flex-start; }
  form [class*='step'] > legend {
    display: flex;
    align-items: flex-start;
    flex-direction: column;
    margin-bottom: 3rem;
    width: auto;
    max-width: none; }
    form [class*='step'] > legend span {
      padding: 0.5rem 1rem; }
    form [class*='step'] > legend span:first-of-type {
      font-size: 2.5rem;
      text-transform: uppercase;
      color: #fefefe;
      background: #f87339; }
    form [class*='step'] > legend span:last-of-type {
      font-size: 2.7rem;
      color: #272f80;
      background: #fefefe; }
  form [class*='step'] > fieldset legend {
    padding-left: 1rem;
    font-size: 1.8rem;
    color: #272f80;
    border-left: 3px solid #f87339; }
  form [class*='step'] > fieldset {
    display: flex;
    align-items: center;
    flex-direction: row;
    justify-content: flex-start;
    margin-bottom: 3rem;
    padding: 1rem 0; }
    form [class*='step'] > fieldset label {
      margin: 0 0.5rem 0 2rem;
      font-size: 1.8rem; }
    form [class*='step'] > fieldset input[type='radio'] {
      vertical-align: middle; }
  form [class*='step'] .button {
    margin-bottom: 15rem;
    margin-left: auto;
    padding: 0.3rem 1rem;
    font-size: 1.8rem;
    cursor: pointer;
    color: #fefefe;
    border: none;
    background: #f87339; }
    form [class*='step'] .button:hover, form [class*='step'] .button a:focus {
      text-decoration: underline; }
    form [class*='step'] .button:after {
      content: '>';
      font-family: monospace;
      font-weight: 900; }

form [class*='hidden'] {
  display: none; }

.article {
  background: #aed2dd; }
  .article main {
    padding-bottom: 10vh;
    color: #272f80;
    background: #fefefe; }
  .article .main-int {
    max-width: 99.1em; }
  .article article {
    font-size: 1.8rem; }
  .article .cover-image {
    max-width: 100%;
    height: auto;
    -o-object-fit: cover;
       object-fit: cover; }
  .article h1 {
    font-size: 4.8rem; }
  .article h2 {
    font-size: 3.2rem; }
  .article header + p strong {
    font-size: 3.2rem; }

#progressbar {
  display: flex;
  overflow: hidden;
  flex-direction: row;
  justify-content: center;
  margin: 20vh 0 30px;
  padding: 0;
  /*CSS counters to number the steps*/
  counter-reset: step; }

#progressbar li {
  position: relative;
  width: 25%;
  list-style-type: none;
  font-size: 9px;
  text-transform: uppercase;
  color: #aed2dd; }

#progressbar li:before {
  content: counter(step);
  display: block;
  margin: 0 auto 5px auto;
  width: 30px;
  line-height: 30px;
  font-size: 1rem;
  counter-increment: step;
  text-align: center;
  color: #aed2dd;
  border-radius: 50%;
  background: #272f80; }

/*progressbar connectors*/
#progressbar li:after {
  position: absolute;
  z-index: -1;
  content: '';
  top: 11px;
  left: -50%;
  width: 100%;
  height: 8px;
  background: #272f80; }

#progressbar li:first-child:after {
  content: none; }

#progressbar li.active:before, #progressbar li.active:after {
  color: #272f80;
  background: #f87339; }

.page404 main article {
  margin: 20vh 0;
  min-height: 60vh;
  font-size: 2.5em; }
  .page404 main article h1 {
    color: #272f80; }
  .page404 main article a {
    color: #272f80; }

.skipnav {
  text-align: left; }

.skipnav a {
  position: absolute;
  left: -10000px;
  overflow: hidden;
  width: 1px;
  height: 1px; }

.skipnav a:focus, .skipnav a:active {
  position: static;
  left: 0;
  display: block;
  overflow: visible;
  padding: 1rem;
  width: auto;
  height: auto;
  text-decoration: underline;
  color: #fefefe;
  background: #313131; }

/* Resultats */
.circle {
  display: inline-block;
  margin-right: 10px;
  height: 20px;
  width: 20px;
  border-radius: 100%;
  background: #0056b3; }

[data-nb-yes='0'] .circle:nth-child(n+1),
[data-nb-yes='1'] .circle:nth-child(n+2),
[data-nb-yes='2'] .circle:nth-child(n+3),
[data-nb-yes='3'] .circle:nth-child(n+4),
[data-nb-yes='4'] .circle:nth-child(n+5) {
  background: #7f7f7f; }

.container-links-scenario a {
  display: none; }

.container-links-scenario[data-scenario='1'] .link-scenario-1,
.container-links-scenario[data-scenario='2'] .link-scenario-2,
.container-links-scenario[data-scenario='3'] .link-scenario-3 {
  display: block; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
